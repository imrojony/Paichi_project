package controllers

import (
	"fmt"
	"strconv"

	jwt "github.com/appleboy/gin-jwt/v2"
	"github.com/gin-gonic/gin"
	"github.com/sohag1990/Paichi/app/models"
	"github.com/sohag1990/Paichi/db"
)

// Comment public controllers generated by bindu

// IndexComment to get all data
func IndexComment(c *gin.Context) {
	page := c.Params.ByName("page")
	id := c.Params.ByName("id")
	limit := 10
	var db = db.DB
	var comments []models.Comment
	db.Where("blog_id=?", id).Preload("User").Find(&comments).Offset(page).Limit(limit)
	for i, _ := range comments {
		comments[i].User.Password = ""
		comments[i].User.Email = ""
		comments[i].User.Phone = ""
	}
	c.JSON(200, comments)
}

// ShowComment to get single data
func ShowComment(c *gin.Context) {
	id := c.Params.ByName("id")
	var db = db.DB
	var comment models.Comment
	db.Where("id=?", id).Preload("User").Find(&comment)

	comment.User.Password = ""
	comment.User.Email = ""
	comment.User.Phone = ""

	c.JSON(200, comment)
}

// CreateComment to a new data
func CreateComment(c *gin.Context) {
	postId, _ := strconv.ParseUint(c.Params.ByName("id"), 10, 64)
	claims := jwt.ExtractClaims(c)
	username, _ := claims["id"]
	fmt.Println(postId)

	var user models.User
	var db = db.DB
	if err := db.Where("username = ?", username).First(&user).Error; err != nil {
		fmt.Println(err)
	}

	var comment models.CommentCreate

	c.BindJSON(&comment)
	comment.UserID = user.ID
	comment.ItemID = postId

	if err := db.Table("comments").Create(&comment).Error; err != nil {
		fmt.Println(err)
	}
	c.JSON(200, comment)
	// c.AbortWithStatus(http.StatusBadRequest)
}

// UpdateComment to Update data
func UpdateComment(c *gin.Context) {
	id := c.Params.ByName("id")
	var db = db.DB
	var comment models.Comment
	var comment2 models.Comment
	c.BindJSON(&comment)
	if err := db.Where("id=?", id).Find(&comment2).Error; err != nil {
		c.JSON(404, comment2)
		return
	}

	db.Model(&comment2).Update(&comment)

	c.JSON(200, comment)
}

// DestroyComment to delete single data
func DestroyComment(c *gin.Context) {
	id := c.Params.ByName("id")
	var db = db.DB
	var comment models.Comment
	if err := db.Where("id=?", id).Find(&comment).Error; err != nil {
		c.JSON(404, comment)
		return
	}

	db.Delete(&comment)

	c.JSON(200, comment)
}
