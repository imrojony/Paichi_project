package controllers

import (
	"fmt"
	"net/http"
	"path/filepath"
	"regexp"
	"strings"
	"time"

	jwt "github.com/appleboy/gin-jwt/v2"
	"github.com/gin-gonic/gin"
	"github.com/sohag1990/Paichi/app/models"
	"github.com/sohag1990/Paichi/db"
)

// Item public controllers generated by bindu

// LostItem to get all data
func LostItem(c *gin.Context) {
	page := c.Params.ByName("page")
	limit := 10
	var db = db.DB
	var items []models.Item
	db.Where("type= ?", "Lost").Find(&items).Offset(page).Limit(limit)

	c.JSON(200, items)
}

// FoundItem to get all data
func FoundItem(c *gin.Context) {
	page := c.Params.ByName("page")
	limit := 10
	var db = db.DB
	var items []models.Item
	db.Where("type= ?", "Found").Find(&items).Offset(page).Limit(limit)

	c.JSON(200, items)
}

// FoundItem and LostItewm search to get all data
func FoundLostItemSearch(c *gin.Context) {
	page := c.Params.ByName("page")
	search := c.Params.ByName("search")
	limit := 10
	var db = db.DB
	var items []models.Item
	db.Where("title LIKE ? OR description LIKE ?", "%"+search+"%", "%"+search+"%").Find(&items).Offset(page).Limit(limit)

	c.JSON(200, items)
}

// ShowItem to get single data
func ShowItem(c *gin.Context) {
	id := c.Params.ByName("id")
	var db = db.DB
	var item models.Item
	db.Where("id=?", id).Preload("User").Preload("Comments.User").Find(&item)

	item.User.Password = ""
	item.User.Email = ""
	item.User.Phone = ""

	for i, _ := range item.Comments {
		item.Comments[i].User.Password = ""
		item.Comments[i].User.Email = ""
		item.Comments[i].User.Phone = ""
	}
	c.JSON(200, item)
}

// CreateItem to a new data
func CreateItem(c *gin.Context) {

	claims := jwt.ExtractClaims(c)
	username, _ := claims["id"]

	var user models.User

	var db = db.DB
	if err := db.Where("username = ?", username).First(&user).Error; err != nil {
		fmt.Println(err)
		return
	}

	type Item struct {
		Mobile      string
		Description string
		Location    string
		Type        string
		Image       string
		Title       string
		Date        string
		UserID      uint64 `json:"-"`
		ID          uint64 `gorm:"primary_key"`
		CreatedAt   time.Time
	}
	var item Item
	item.UserID = user.ID
	c.BindJSON(&item)
	// fmt.Println(item)
	if err := db.Create(&item).Error; err != nil {
		fmt.Println(err)
		return
	}
	c.JSON(200, item)

}

// Uploader func
func Uploader(c *gin.Context) {
	fmt.Println("Dhukse")
	// Source
	file, err := c.FormFile("Image")
	fmt.Println(file.Filename)
	if err != nil {
		c.String(http.StatusBadRequest, fmt.Sprintf("get form err: %s", err.Error()))
		fmt.Println("Error hoise", err.Error())
		return
	}
	dt := time.Now().Format("20060102150405")
	imgname := dt + "_" + filepath.Base(file.Filename)
	filename := "public/uploads/" + imgname
	chars := []string{"]", "^", "\\\\", "[", ":", " ", "(", ")", "-", "+", "="}
	r := strings.Join(chars, "")
	re := regexp.MustCompile("[" + r + "]+")
	filename = re.ReplaceAllString(filename, "")
	fmt.Println("filename", filename)
	if err := c.SaveUploadedFile(file, filename); err != nil {
		c.String(http.StatusBadRequest, fmt.Sprintf("upload file err: %s", err.Error()))
		fmt.Println(err.Error())
		return
	}

	type Image struct {
		ImageName string
	}

	var image Image
	image.ImageName = imgname
	c.JSON(200, image)
}

// UpdateItem to Update data
func UpdateItem(c *gin.Context) {
	id := c.Params.ByName("id")
	var db = db.DB
	var item models.Item
	var item2 models.Item
	c.BindJSON(&item)
	if err := db.Where("id=?", id).Find(&item2).Error; err != nil {
		c.JSON(404, item2)
		return
	}

	db.Model(&item2).Update(&item)

	c.JSON(200, item)
}

// DestroyItem to delete single data
func DestroyItem(c *gin.Context) {
	id := c.Params.ByName("id")
	var db = db.DB
	var item models.Item
	if err := db.Where("id=?", id).Find(&item).Error; err != nil {
		c.JSON(404, item)
		return
	}

	db.Delete(&item)

	c.JSON(200, item)
}
